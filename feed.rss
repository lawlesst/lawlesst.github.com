<?xml version="1.0" encoding="iso-8859-1"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Ted Lawless</title><link>http://lawlesst.github.com</link><description>Notes on projects.</description><lastBuildDate>Sun, 30 Sep 2012 15:38:22 GMT</lastBuildDate><generator>PyRSS2Gen-1.0.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Focusing on Delivery</title><link>http://lawlesst.github.com/notebook/delivery.html</link><content:encoded><![CDATA[<p>A <a href="https://twitter.com/hochstenbach/status/251929102024597504">Twitter exchange</a> between <a href="https://twitter.com/intent/user?screen_name=hochstenbach">Patrick Hochstenbach</a> and <a href="https://twitter.com/rcallewaert">Rosemie Callewaert
</a> voiced the opinion that library "discovery systems should focus more on delivery".  I agree - completely - and would like to describe some of the work I've been a part of recently that focuses on delivery of library content. </p>
<p>At the Brown University Library, we have recently taken steps to improve the delivery of journal articles to library users.  We call the project easyArticle<sup id="fnref:code"><a href="#fn:code" rel="footnote">1</a></sup>.  When a user clicks on the 'Findit @Brown' link in various databases (including Google Scholar) or clicks the access link in our <a href="http://www.serialssolutions.com/en/services/summon/">Summon</a> <a href="http://library.brown.edu/find/Summon/Search?lookfor=learning+to+use+word+processors&amp;type=AllFields&amp;filter[]=holdingsOnly%3A%22false%22&amp;view=list">front-end</a>, she is routed through this system.<br />
</p>
<p>In its most basic form, easyArticle is a front-end to the 360Link link resolver from Serials Solutions.  However it adds a fair amount of functionality beyond the typical link resolver.  The biggest addition to date is the automated submission of Interlibrary Loan and document delivery requests.  This along with the <a href="http://library.brown.edu/its/software/easyborrow/">easyBorrow</a> project at Brown, which focuses on obtaining copies of books, consist of our "delivery" services.<br />
</p>
<p>This screencast demonstrates a search in Google Scholar that leads to the user requesting an article via Interlibrary Loan through this application<sup id="fnref:code"><a href="#fn:code" rel="footnote">1</a></sup>.  Below the screencast is a list of user scenarios and how the easyArticle system is delivery the content to the user.  <br />
<div style="width: 700px; margin: 1em; margin-left:auto; margin-right:auto; padding:1em;">
<iframe src="http://www.screenr.com/embed/B1a8" width="650" height="396" frameborder="0"></iframe>
</div></p>
<h3 id="user-scenarios-for-our-easyarticle-link-resolver-or-article-delivery-platform">User scenarios for our easyArticle link resolver, or article delivery platform.</h3>
<h4 id="library-has-a-license-to-an-electronic-version-of-the-article-or-knows-of-an-open-access-electronic-copy-of-the-article">Library has a license to an electronic version of the article or knows of an open access electronic copy of the article.</h4>
<p>The user is <a href="http://library.brown.edu/easyarticle/get/eaB/">presented with link</a> to the electronic version, much like most link resolvers.  Although this page is served by a locally developed web application so we have complete control over its appearance and content.<br />
</p>
<h4 id="library-holds-the-print-version-of-the-article">Library holds the print version of the article.</h4>
<p>Students are presented with the location in the stacks of the item.  <a href="http://library.brown.edu/easyarticle/get/eaC/">Example</a>. This also uses a locally developed web service, called the <a href="https://bitbucket.org/bul/book-locator">book locator</a>, to give the user the exact floor and aisle location of the item.</p>
<p>Faculty can click a 'request' link that will create a document delivery request in Illiad.  Library staff will then retrieve the item from the stacks, scan it, and it will be delivered via the document delivery software. </p>
<h4 id="library-does-not-license-an-electronic-copy-of-the-article-and-does-not-hold-a-print-copy-of-the-article">Library does not license an electronic copy of the article and does not hold a print copy of the article.</h4>
<p>Users are offered a request link.  If the user is not authenticated, the user is prompted to login via the campus Shibboleth system.  After clicking a confirmation button, the request is submitted to Illiad.<br />
</p>
<p>The library is a member of the <a href="http://rapid2.library.colostate.edu/Public/AboutRapid">RapidILL</a> resource sharing network.  Requests that are available via this network are delivered to the users with 24 hours (Monday through Friday) of receipt.  If you aren't familiar with Rapid, there is more information in this <a href="http://www.ilds2011.org/presentations/Delaney_RapidILL_ILDS2011_2011-09-19.pdf">presentation</a>.  It's a great collaborative effort.<br />
</p>
<p>Requests not available via Rapid are then processed through normal ILL procedures and documents are delivered directly via the Illiad software.<br />
</p>
<h4 id="something-goes-wrong">Something goes wrong.</h4>
<p>Unfortunately not all OpenURLs contain enough metadata or the holdings information in the knowledgebase isn't quite right and users can't get the article they are looking for.  In these instances, we offer users a simple problem report form that contains a link to the citation and their IP address that will help staff track down the problem.  This has led to speedier resolution of problems and a more centralized place to track problems and identify which platforms aren't working well with OpenURL.<br />
</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:code">
<p>Many of the components of this application are <a href="https://github.com/lawlesst">available on Github</a> as separate Python modules.  I also <a href="http://lawlesst.github.com/notebook/heroku360link.html">wrote previously</a> about building a demo application on Heroku that provides the basic functionality of this application. &#160;<a href="#fnref:code" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded><description></description><guid>http://lawlesst.github.com/notebook/delivery.html</guid><pubDate>Sun, 30 Sep 2012 00:00:00 GMT</pubDate></item><item><title>Django, Heroku, and the 360Link API</title><link>http://lawlesst.github.com/notebook/heroku360link.html</link><content:encoded><![CDATA[<blockquote>
<p>This post describes a <a href="http://damp-tor-3124.herokuapp.com/">demo application</a> that serves as a front-end to the <a href="http://www.serialssolutions.com/en/services/360-link">360Link OpenURL resolver</a>
from Serials Solutions.  The code is available on <a href="https://github.com/lawlesst/heroku-360link">Github</a> and the application is running on Heroku.  <br />
</p>
</blockquote>
<p>A recent <a href="http://serials.infomotions.com/code4lib/archive/2012/201209/2516.html">thread</a> on the Code4Lib mailing list discussed technical details of the <a href="http://www.serialssolutions.com/en/services/360-link">360Link </a> OpenURL resolver.  The technical details are interesting because the OpenURL resolver is often the last handoff from the library systems to the location on the web where users can actually get what they are looking for.  If something goes wrong, it's a frustating experience for everyone involved. </p>
<p>Over the last year, my colleagues and I at Brown University Library have developed a new front-end to 360Link using the <a href="http://www.serialssolutions.com/en/services/360-search/xml-api">360Link API</a>.  It's been serving OpenURL requests since February and, as of August, has completely replaced our use of the default 360Link interface.  The main objective of this project was to streamline the delivery of content found in various databases.<br />
</p>
<p>Since 360Link is rather popular in academic libraries and other libaries might be interested in implementing their own front-end, I decided to put together a demo <a href="https://www.djangoproject.com/">Django</a> application that uses the API to create a basic link resolver.  <br />
</p>
<p>Here are a few sample links.  You can also paste an OpenURL into the form on the <a href="http://damp-tor-3124.herokuapp.com/">index page</a></p>
<ul>
<li><a href="http://damp-tor-3124.herokuapp.com/?doi=doi/10.2202/1542-0485.1188">Sample article lookup</a></li>
<li><a href="http://damp-tor-3124.herokuapp.com/?pmid=22953657">Pubmed lookup</a></li>
<li><a href="http://damp-tor-3124.herokuapp.com/?pmid=22953657&amp;output=json">JSON(P) responses</a> via content negotiation or adding output=json to the OpenURL. </li>
<li><a href="http://damp-tor-3124.herokuapp.com/dl2af5jf3e/?pmid=22953657">Another sample response</a> but a customer code has been added to the url to switch to another library's API.<br />
</li>
</ul>
<p>You can easily switch libraries by adding another library's Serials Solutions customer code to the URL - e.g Brown's default 360Link interface is at http://rl3tp7zf5x.search.serialssolutions.com/ so the customer code is "rl3tp7z5x".  While testing this, I noticed that some library's API requires authentictation but most seem to be open and testable.<br />
</p>
<p>To run some real requests through this app, you could login to <a href="http://www.mendeley.com/">Mendeley</a> and set it as your resolver in the Find this paper at dropdown menu. <br />
</p>
<p>The app is running on Heroku and the code is on <a href="https://github.com/lawlesst/heroku-360link">Github</a>.  As far as I know, any library that subscribes to 360Link also has access to the API, so you could checkout this code, make a few tweaks, and have it running for your library pretty quickly.  If you take a look, you'll notice that it's a couple of URL routes and a few dozen lines of controller (view in Django) code.  So it takes less work to get started with the API than you might suspect.<br />
</p>
<p>For more details about working with the API, Daniel Talsky did a nice job of <a href="http://journal.code4lib.org/articles/108">explaining the API</a> in Issue 4, 2008  of the Code4Lib Journal.  <br />
</p>
<p>At Brown we have seem some performance issues with the API, particularly with Pubmed ID lookups, but these issues are also present in the default interface too.  Overall it's been quite rewarding to have control over the link resolver interface and to dive in and add new features that make it easier for patrons to get to library content.<br />
</p>]]></content:encoded><description></description><guid>http://lawlesst.github.com/notebook/heroku360link.html</guid><pubDate>Tue, 11 Sep 2012 00:00:00 GMT</pubDate></item></channel></rss>